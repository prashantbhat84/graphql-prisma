type Query {
  me: User!
  post: Post!
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
}
type Mutation {
  createUser(data: createUserInput!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: updateUserInput): User!
  createPost(data: createPostInput!): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(text: String!, author: ID!, post: ID!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: updateCommentInput): Comment!
}
type Subscription {
  comment(postid: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
input createUserInput {
  name: String!
  email: String!
}
input createPostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input updateUserInput {
  name: String
  email: String
}
input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input updateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!

  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}
type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}
